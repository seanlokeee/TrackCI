#Build pipeline as code
version: 2.1 #top layer
commands:
  install_dev_deps:
    steps:
      - run:
          name: Install Development Dependencies
          command: |
            npm install

# collection of jobs which get executed as part of the workflow
jobs:
  build-and-test:
    docker: # executor type, underlying technology to run jobs using Docker Containers
      # use latest version of node in long term support to prevent build from breaking
      - image: circleci/node:lts #packaged system which has instructions for creating a running environment
    working_directory: ~/project/src #source code inside src folder
    steps:
      #access root folder of source repository
      - checkout:
          path: ~/project # set checkout path to project
      - install_dev_deps
      - run:
          name: Run Linting
          # test-lint outputting results
          # store-lint outputting file and storing results as xml 
          command: |
            npm run test-lint
            npm run store-lint
      - store_artifacts:
          path: linting-result/eslintresult.xml
      - run:
          name: Run Unit Tests
          command: |
            npm run test-unit
      - store_test_results:
          path: unit-test-result
      - store_artifacts: #store test result as an artifact
          path: unit-test-result/unittestresult.xml
      - run: #downloads a shell file from code coverage
          name: Get And Validate Code Coverage Report
          command: |
            npm run test-coverage
            bash <(curl -s https://codecov.io/bash)
      - store_artifacts: #when build/test process finishes on a specific section
          path: coverage #keeping result file available after process has finished
  
  integration-test:
    docker:
      #primary container image where all job commands will be run on
      - image: circleci/node:lts #comes with docker-compose installed
      #service container image, running in common network where exposed ports will be available on localhost from primary container
      - image: circleci/postgres:9.6.9-alpine #Secondary container image on common network
        environment:
          POSTGRES_USER: postgres 
          POSTGRES_PASSWORD: password
          POSTGRES_DB: servian
    working_directory: ~/project/src
    steps: #in a multi-image configuration job, all steps are executed in the container created by the first image listed
      - checkout:
          path: ~/project
      - install_dev_deps
      - run:
          name: Run Integration Tests
          command: |
            npm run test-integration
      - store_test_results: 
          path: integration-test-result 
      - store_artifacts: #store test result as an artifact
          path: integration-test-result/integrationtestresult.xml

  e2e-test: #browser testing, requires live web application
    docker: #and database running so 2nd image is used simultaneously
      - image: qawolf/qawolf:v0.9.2
      - image: circleci/postgres:9.6.9-alpine
        environment:
          POSTGRES_USER: postgres 
          POSTGRES_PASSWORD: password
          POSTGRES_DB: servian
    working_directory: ~/project/src
    steps:
      - checkout:
          path: ~/project
      - install_dev_deps
      - run:
          name: Run E2E Tests
          no_output_timeout: 4m
          command: |
            sh e2e.sh
      - store_artifacts:
          path: e2e-test-result

  #take output of the build, package it up and store it somewhere for future use
  package: 
    docker:
      - image: circleci/node:lts
    steps:
      - checkout
      - run:
          name: Install Production Dependencies
          environment:
            NODE_ENV: production
          command: |
            cd src
            npm install
      #zip up entire src file to prevent long loading-copying time as circleci
      - run: #prints to screen every time it copies a file, making process slow
          name: Compress Complete Application
          command: |
            mkdir -p dist
            zip -r dist/src.zip src/
      - store_artifacts: #dist = distribution folder outside of src folder
          path: dist

#describes which jobs get executed, in which order, and in which scenarios
workflows:
  version: 2
  build-test-package:
    jobs:
      - build-and-test
      - integration-test:
          requires:
            - build-and-test
      - e2e-test:
          requires:
            - build-and-test
            - integration-test
      #packaging must only run on the master branch
      - package:
          requires:
             - e2e-test
          filters:
            branches:
              only: master